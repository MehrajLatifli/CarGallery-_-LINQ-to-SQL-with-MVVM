#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CarGallery.Models.Data_Access.SQL_Server
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CarGallery")]
	public partial class CarGalleryDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdmin(Admin instance);
    partial void UpdateAdmin(Admin instance);
    partial void DeleteAdmin(Admin instance);
    partial void InsertCarBodyStyle(CarBodyStyle instance);
    partial void UpdateCarBodyStyle(CarBodyStyle instance);
    partial void DeleteCarBodyStyle(CarBodyStyle instance);
    partial void InsertCarBrandsandModel(CarBrandsandModel instance);
    partial void UpdateCarBrandsandModel(CarBrandsandModel instance);
    partial void DeleteCarBrandsandModel(CarBrandsandModel instance);
    partial void InsertCarColor(CarColor instance);
    partial void UpdateCarColor(CarColor instance);
    partial void DeleteCarColor(CarColor instance);
    partial void InsertCarEnginePower(CarEnginePower instance);
    partial void UpdateCarEnginePower(CarEnginePower instance);
    partial void DeleteCarEnginePower(CarEnginePower instance);
    partial void InsertCarEngine(CarEngine instance);
    partial void UpdateCarEngine(CarEngine instance);
    partial void DeleteCarEngine(CarEngine instance);
    partial void InsertCarFueltype(CarFueltype instance);
    partial void UpdateCarFueltype(CarFueltype instance);
    partial void DeleteCarFueltype(CarFueltype instance);
    partial void InsertCarGearbox(CarGearbox instance);
    partial void UpdateCarGearbox(CarGearbox instance);
    partial void DeleteCarGearbox(CarGearbox instance);
    partial void InsertCarKilometre(CarKilometre instance);
    partial void UpdateCarKilometre(CarKilometre instance);
    partial void DeleteCarKilometre(CarKilometre instance);
    partial void InsertCarPrice(CarPrice instance);
    partial void UpdateCarPrice(CarPrice instance);
    partial void DeleteCarPrice(CarPrice instance);
    partial void InsertCarQuantity(CarQuantity instance);
    partial void UpdateCarQuantity(CarQuantity instance);
    partial void DeleteCarQuantity(CarQuantity instance);
    partial void InsertCar(Car instance);
    partial void UpdateCar(Car instance);
    partial void DeleteCar(Car instance);
    partial void InsertCarTransmission(CarTransmission instance);
    partial void UpdateCarTransmission(CarTransmission instance);
    partial void DeleteCarTransmission(CarTransmission instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertManufactureYear(ManufactureYear instance);
    partial void UpdateManufactureYear(ManufactureYear instance);
    partial void DeleteManufactureYear(ManufactureYear instance);
    partial void InsertNewCar(NewCar instance);
    partial void UpdateNewCar(NewCar instance);
    partial void DeleteNewCar(NewCar instance);
    #endregion
		
		public CarGalleryDataClassesDataContext() : 
				base(global::CarGallery.Properties.Settings.Default.CarGalleryConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CarGalleryDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CarGalleryDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CarGalleryDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CarGalleryDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Admin> Admins
		{
			get
			{
				return this.GetTable<Admin>();
			}
		}
		
		public System.Data.Linq.Table<CarBodyStyle> CarBodyStyles
		{
			get
			{
				return this.GetTable<CarBodyStyle>();
			}
		}
		
		public System.Data.Linq.Table<CarBrandsandModel> CarBrandsandModels
		{
			get
			{
				return this.GetTable<CarBrandsandModel>();
			}
		}
		
		public System.Data.Linq.Table<CarColor> CarColors
		{
			get
			{
				return this.GetTable<CarColor>();
			}
		}
		
		public System.Data.Linq.Table<CarEnginePower> CarEnginePowers
		{
			get
			{
				return this.GetTable<CarEnginePower>();
			}
		}
		
		public System.Data.Linq.Table<CarEngine> CarEngines
		{
			get
			{
				return this.GetTable<CarEngine>();
			}
		}
		
		public System.Data.Linq.Table<CarFueltype> CarFueltypes
		{
			get
			{
				return this.GetTable<CarFueltype>();
			}
		}
		
		public System.Data.Linq.Table<CarGearbox> CarGearboxes
		{
			get
			{
				return this.GetTable<CarGearbox>();
			}
		}
		
		public System.Data.Linq.Table<CarKilometre> CarKilometres
		{
			get
			{
				return this.GetTable<CarKilometre>();
			}
		}
		
		public System.Data.Linq.Table<CarPrice> CarPrices
		{
			get
			{
				return this.GetTable<CarPrice>();
			}
		}
		
		public System.Data.Linq.Table<CarQuantity> CarQuantities
		{
			get
			{
				return this.GetTable<CarQuantity>();
			}
		}
		
		public System.Data.Linq.Table<Car> Cars
		{
			get
			{
				return this.GetTable<Car>();
			}
		}
		
		public System.Data.Linq.Table<CarTransmission> CarTransmissions
		{
			get
			{
				return this.GetTable<CarTransmission>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<ManufactureYear> ManufactureYears
		{
			get
			{
				return this.GetTable<ManufactureYear>();
			}
		}
		
		public System.Data.Linq.Table<NewCar> NewCars
		{
			get
			{
				return this.GetTable<NewCar>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Admins")]
	public partial class Admin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdAdmins;
		
		private string _Name_of_Admins;
		
		private string _Passwords_of_Admins;
		
		private EntitySet<Car> _Cars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdAdminsChanging(int value);
    partial void OnIdAdminsChanged();
    partial void OnName_of_AdminsChanging(string value);
    partial void OnName_of_AdminsChanged();
    partial void OnPasswords_of_AdminsChanging(string value);
    partial void OnPasswords_of_AdminsChanged();
    #endregion
		
		public Admin()
		{
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdAdmins", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdAdmins
		{
			get
			{
				return this._IdAdmins;
			}
			set
			{
				if ((this._IdAdmins != value))
				{
					this.OnIdAdminsChanging(value);
					this.SendPropertyChanging();
					this._IdAdmins = value;
					this.SendPropertyChanged("IdAdmins");
					this.OnIdAdminsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Name of Admins]", Storage="_Name_of_Admins", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name_of_Admins
		{
			get
			{
				return this._Name_of_Admins;
			}
			set
			{
				if ((this._Name_of_Admins != value))
				{
					this.OnName_of_AdminsChanging(value);
					this.SendPropertyChanging();
					this._Name_of_Admins = value;
					this.SendPropertyChanged("Name_of_Admins");
					this.OnName_of_AdminsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Passwords of Admins]", Storage="_Passwords_of_Admins", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Passwords_of_Admins
		{
			get
			{
				return this._Passwords_of_Admins;
			}
			set
			{
				if ((this._Passwords_of_Admins != value))
				{
					this.OnPasswords_of_AdminsChanging(value);
					this.SendPropertyChanging();
					this._Passwords_of_Admins = value;
					this.SendPropertyChanged("Passwords_of_Admins");
					this.OnPasswords_of_AdminsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Admin_Car", Storage="_Cars", ThisKey="IdAdmins", OtherKey="AdminsId")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.Admin = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.Admin = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarBodyStyles")]
	public partial class CarBodyStyle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCarBodyStyles;
		
		private string _Name_of_Car_Body_Styles;
		
		private EntitySet<Car> _Cars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCarBodyStylesChanging(int value);
    partial void OnIdCarBodyStylesChanged();
    partial void OnName_of_Car_Body_StylesChanging(string value);
    partial void OnName_of_Car_Body_StylesChanged();
    #endregion
		
		public CarBodyStyle()
		{
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCarBodyStyles", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCarBodyStyles
		{
			get
			{
				return this._IdCarBodyStyles;
			}
			set
			{
				if ((this._IdCarBodyStyles != value))
				{
					this.OnIdCarBodyStylesChanging(value);
					this.SendPropertyChanging();
					this._IdCarBodyStyles = value;
					this.SendPropertyChanged("IdCarBodyStyles");
					this.OnIdCarBodyStylesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Name of Car Body Styles]", Storage="_Name_of_Car_Body_Styles", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name_of_Car_Body_Styles
		{
			get
			{
				return this._Name_of_Car_Body_Styles;
			}
			set
			{
				if ((this._Name_of_Car_Body_Styles != value))
				{
					this.OnName_of_Car_Body_StylesChanging(value);
					this.SendPropertyChanging();
					this._Name_of_Car_Body_Styles = value;
					this.SendPropertyChanged("Name_of_Car_Body_Styles");
					this.OnName_of_Car_Body_StylesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarBodyStyle_Car", Storage="_Cars", ThisKey="IdCarBodyStyles", OtherKey="CarBodyStylesId")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarBodyStyle = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarBodyStyle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarBrandsandModels")]
	public partial class CarBrandsandModel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCarBrandsandModels;
		
		private string _BrandsandModels_of_car;
		
		private string _Images_of_car;
		
		private EntitySet<Car> _Cars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCarBrandsandModelsChanging(int value);
    partial void OnIdCarBrandsandModelsChanged();
    partial void OnBrandsandModels_of_carChanging(string value);
    partial void OnBrandsandModels_of_carChanged();
    partial void OnImages_of_carChanging(string value);
    partial void OnImages_of_carChanged();
    #endregion
		
		public CarBrandsandModel()
		{
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCarBrandsandModels", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCarBrandsandModels
		{
			get
			{
				return this._IdCarBrandsandModels;
			}
			set
			{
				if ((this._IdCarBrandsandModels != value))
				{
					this.OnIdCarBrandsandModelsChanging(value);
					this.SendPropertyChanging();
					this._IdCarBrandsandModels = value;
					this.SendPropertyChanged("IdCarBrandsandModels");
					this.OnIdCarBrandsandModelsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[BrandsandModels of car]", Storage="_BrandsandModels_of_car", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string BrandsandModels_of_car
		{
			get
			{
				return this._BrandsandModels_of_car;
			}
			set
			{
				if ((this._BrandsandModels_of_car != value))
				{
					this.OnBrandsandModels_of_carChanging(value);
					this.SendPropertyChanging();
					this._BrandsandModels_of_car = value;
					this.SendPropertyChanged("BrandsandModels_of_car");
					this.OnBrandsandModels_of_carChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Images of car]", Storage="_Images_of_car", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Images_of_car
		{
			get
			{
				return this._Images_of_car;
			}
			set
			{
				if ((this._Images_of_car != value))
				{
					this.OnImages_of_carChanging(value);
					this.SendPropertyChanging();
					this._Images_of_car = value;
					this.SendPropertyChanged("Images_of_car");
					this.OnImages_of_carChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarBrandsandModel_Car", Storage="_Cars", ThisKey="IdCarBrandsandModels", OtherKey="CarBrandsandModelsId")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarBrandsandModel = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarBrandsandModel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarColors")]
	public partial class CarColor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCarColors;
		
		private string _Name_of_Car_Color;
		
		private EntitySet<Car> _Cars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCarColorsChanging(int value);
    partial void OnIdCarColorsChanged();
    partial void OnName_of_Car_ColorChanging(string value);
    partial void OnName_of_Car_ColorChanged();
    #endregion
		
		public CarColor()
		{
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCarColors", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCarColors
		{
			get
			{
				return this._IdCarColors;
			}
			set
			{
				if ((this._IdCarColors != value))
				{
					this.OnIdCarColorsChanging(value);
					this.SendPropertyChanging();
					this._IdCarColors = value;
					this.SendPropertyChanged("IdCarColors");
					this.OnIdCarColorsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Name of Car Color]", Storage="_Name_of_Car_Color", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name_of_Car_Color
		{
			get
			{
				return this._Name_of_Car_Color;
			}
			set
			{
				if ((this._Name_of_Car_Color != value))
				{
					this.OnName_of_Car_ColorChanging(value);
					this.SendPropertyChanging();
					this._Name_of_Car_Color = value;
					this.SendPropertyChanged("Name_of_Car_Color");
					this.OnName_of_Car_ColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarColor_Car", Storage="_Cars", ThisKey="IdCarColors", OtherKey="CarColorsId")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarColor = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarColor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarEnginePowers")]
	public partial class CarEnginePower : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCarEnginePowers;
		
		private long _Number_of_Car_Engine_Powers;
		
		private EntitySet<Car> _Cars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCarEnginePowersChanging(int value);
    partial void OnIdCarEnginePowersChanged();
    partial void OnNumber_of_Car_Engine_PowersChanging(long value);
    partial void OnNumber_of_Car_Engine_PowersChanged();
    #endregion
		
		public CarEnginePower()
		{
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCarEnginePowers", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCarEnginePowers
		{
			get
			{
				return this._IdCarEnginePowers;
			}
			set
			{
				if ((this._IdCarEnginePowers != value))
				{
					this.OnIdCarEnginePowersChanging(value);
					this.SendPropertyChanging();
					this._IdCarEnginePowers = value;
					this.SendPropertyChanged("IdCarEnginePowers");
					this.OnIdCarEnginePowersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Number of Car Engine Powers]", Storage="_Number_of_Car_Engine_Powers", DbType="BigInt NOT NULL")]
		public long Number_of_Car_Engine_Powers
		{
			get
			{
				return this._Number_of_Car_Engine_Powers;
			}
			set
			{
				if ((this._Number_of_Car_Engine_Powers != value))
				{
					this.OnNumber_of_Car_Engine_PowersChanging(value);
					this.SendPropertyChanging();
					this._Number_of_Car_Engine_Powers = value;
					this.SendPropertyChanged("Number_of_Car_Engine_Powers");
					this.OnNumber_of_Car_Engine_PowersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarEnginePower_Car", Storage="_Cars", ThisKey="IdCarEnginePowers", OtherKey="CarEnginePowersId")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarEnginePower = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarEnginePower = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarEngines")]
	public partial class CarEngine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCarEngines;
		
		private double _Number_of_Car_Engine;
		
		private EntitySet<Car> _Cars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCarEnginesChanging(int value);
    partial void OnIdCarEnginesChanged();
    partial void OnNumber_of_Car_EngineChanging(double value);
    partial void OnNumber_of_Car_EngineChanged();
    #endregion
		
		public CarEngine()
		{
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCarEngines", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCarEngines
		{
			get
			{
				return this._IdCarEngines;
			}
			set
			{
				if ((this._IdCarEngines != value))
				{
					this.OnIdCarEnginesChanging(value);
					this.SendPropertyChanging();
					this._IdCarEngines = value;
					this.SendPropertyChanged("IdCarEngines");
					this.OnIdCarEnginesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Number of Car Engine]", Storage="_Number_of_Car_Engine", DbType="Float NOT NULL")]
		public double Number_of_Car_Engine
		{
			get
			{
				return this._Number_of_Car_Engine;
			}
			set
			{
				if ((this._Number_of_Car_Engine != value))
				{
					this.OnNumber_of_Car_EngineChanging(value);
					this.SendPropertyChanging();
					this._Number_of_Car_Engine = value;
					this.SendPropertyChanged("Number_of_Car_Engine");
					this.OnNumber_of_Car_EngineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarEngine_Car", Storage="_Cars", ThisKey="IdCarEngines", OtherKey="CarEnginesId")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarEngine = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarEngine = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarFueltypes")]
	public partial class CarFueltype : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCarFueltypes;
		
		private string _Name_of_Car_Fueltypes;
		
		private EntitySet<Car> _Cars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCarFueltypesChanging(int value);
    partial void OnIdCarFueltypesChanged();
    partial void OnName_of_Car_FueltypesChanging(string value);
    partial void OnName_of_Car_FueltypesChanged();
    #endregion
		
		public CarFueltype()
		{
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCarFueltypes", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCarFueltypes
		{
			get
			{
				return this._IdCarFueltypes;
			}
			set
			{
				if ((this._IdCarFueltypes != value))
				{
					this.OnIdCarFueltypesChanging(value);
					this.SendPropertyChanging();
					this._IdCarFueltypes = value;
					this.SendPropertyChanged("IdCarFueltypes");
					this.OnIdCarFueltypesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Name of Car Fueltypes]", Storage="_Name_of_Car_Fueltypes", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name_of_Car_Fueltypes
		{
			get
			{
				return this._Name_of_Car_Fueltypes;
			}
			set
			{
				if ((this._Name_of_Car_Fueltypes != value))
				{
					this.OnName_of_Car_FueltypesChanging(value);
					this.SendPropertyChanging();
					this._Name_of_Car_Fueltypes = value;
					this.SendPropertyChanged("Name_of_Car_Fueltypes");
					this.OnName_of_Car_FueltypesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarFueltype_Car", Storage="_Cars", ThisKey="IdCarFueltypes", OtherKey="CarFueltypesId")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarFueltype = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarFueltype = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarGearboxes")]
	public partial class CarGearbox : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCarGearboxes;
		
		private string _Name_of_Car_Gearboxes;
		
		private EntitySet<Car> _Cars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCarGearboxesChanging(int value);
    partial void OnIdCarGearboxesChanged();
    partial void OnName_of_Car_GearboxesChanging(string value);
    partial void OnName_of_Car_GearboxesChanged();
    #endregion
		
		public CarGearbox()
		{
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCarGearboxes", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCarGearboxes
		{
			get
			{
				return this._IdCarGearboxes;
			}
			set
			{
				if ((this._IdCarGearboxes != value))
				{
					this.OnIdCarGearboxesChanging(value);
					this.SendPropertyChanging();
					this._IdCarGearboxes = value;
					this.SendPropertyChanged("IdCarGearboxes");
					this.OnIdCarGearboxesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Name of Car Gearboxes]", Storage="_Name_of_Car_Gearboxes", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name_of_Car_Gearboxes
		{
			get
			{
				return this._Name_of_Car_Gearboxes;
			}
			set
			{
				if ((this._Name_of_Car_Gearboxes != value))
				{
					this.OnName_of_Car_GearboxesChanging(value);
					this.SendPropertyChanging();
					this._Name_of_Car_Gearboxes = value;
					this.SendPropertyChanged("Name_of_Car_Gearboxes");
					this.OnName_of_Car_GearboxesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarGearbox_Car", Storage="_Cars", ThisKey="IdCarGearboxes", OtherKey="CarGearboxesId")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarGearbox = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarGearbox = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarKilometres")]
	public partial class CarKilometre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCarKilometres;
		
		private long _Number_of_Car_Kilometres;
		
		private EntitySet<Car> _Cars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCarKilometresChanging(int value);
    partial void OnIdCarKilometresChanged();
    partial void OnNumber_of_Car_KilometresChanging(long value);
    partial void OnNumber_of_Car_KilometresChanged();
    #endregion
		
		public CarKilometre()
		{
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCarKilometres", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCarKilometres
		{
			get
			{
				return this._IdCarKilometres;
			}
			set
			{
				if ((this._IdCarKilometres != value))
				{
					this.OnIdCarKilometresChanging(value);
					this.SendPropertyChanging();
					this._IdCarKilometres = value;
					this.SendPropertyChanged("IdCarKilometres");
					this.OnIdCarKilometresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Number of Car Kilometres]", Storage="_Number_of_Car_Kilometres", DbType="BigInt NOT NULL")]
		public long Number_of_Car_Kilometres
		{
			get
			{
				return this._Number_of_Car_Kilometres;
			}
			set
			{
				if ((this._Number_of_Car_Kilometres != value))
				{
					this.OnNumber_of_Car_KilometresChanging(value);
					this.SendPropertyChanging();
					this._Number_of_Car_Kilometres = value;
					this.SendPropertyChanged("Number_of_Car_Kilometres");
					this.OnNumber_of_Car_KilometresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarKilometre_Car", Storage="_Cars", ThisKey="IdCarKilometres", OtherKey="CarKilometresId")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarKilometre = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarKilometre = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarPrices")]
	public partial class CarPrice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCarPrices;
		
		private decimal _Number_of_Car_Prices;
		
		private EntitySet<Car> _Cars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCarPricesChanging(int value);
    partial void OnIdCarPricesChanged();
    partial void OnNumber_of_Car_PricesChanging(decimal value);
    partial void OnNumber_of_Car_PricesChanged();
    #endregion
		
		public CarPrice()
		{
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCarPrices", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCarPrices
		{
			get
			{
				return this._IdCarPrices;
			}
			set
			{
				if ((this._IdCarPrices != value))
				{
					this.OnIdCarPricesChanging(value);
					this.SendPropertyChanging();
					this._IdCarPrices = value;
					this.SendPropertyChanged("IdCarPrices");
					this.OnIdCarPricesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Number of Car Prices]", Storage="_Number_of_Car_Prices", DbType="Money NOT NULL")]
		public decimal Number_of_Car_Prices
		{
			get
			{
				return this._Number_of_Car_Prices;
			}
			set
			{
				if ((this._Number_of_Car_Prices != value))
				{
					this.OnNumber_of_Car_PricesChanging(value);
					this.SendPropertyChanging();
					this._Number_of_Car_Prices = value;
					this.SendPropertyChanged("Number_of_Car_Prices");
					this.OnNumber_of_Car_PricesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarPrice_Car", Storage="_Cars", ThisKey="IdCarPrices", OtherKey="CarPricesId")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarPrice = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarPrice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarQuantities")]
	public partial class CarQuantity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCarQuantities;
		
		private int _Quantity_of_Car;
		
		private EntitySet<Car> _Cars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCarQuantitiesChanging(int value);
    partial void OnIdCarQuantitiesChanged();
    partial void OnQuantity_of_CarChanging(int value);
    partial void OnQuantity_of_CarChanged();
    #endregion
		
		public CarQuantity()
		{
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCarQuantities", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCarQuantities
		{
			get
			{
				return this._IdCarQuantities;
			}
			set
			{
				if ((this._IdCarQuantities != value))
				{
					this.OnIdCarQuantitiesChanging(value);
					this.SendPropertyChanging();
					this._IdCarQuantities = value;
					this.SendPropertyChanged("IdCarQuantities");
					this.OnIdCarQuantitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Quantity of Car]", Storage="_Quantity_of_Car", DbType="Int NOT NULL")]
		public int Quantity_of_Car
		{
			get
			{
				return this._Quantity_of_Car;
			}
			set
			{
				if ((this._Quantity_of_Car != value))
				{
					this.OnQuantity_of_CarChanging(value);
					this.SendPropertyChanging();
					this._Quantity_of_Car = value;
					this.SendPropertyChanged("Quantity_of_Car");
					this.OnQuantity_of_CarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarQuantity_Car", Storage="_Cars", ThisKey="IdCarQuantities", OtherKey="CarQuantitiesId")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarQuantity = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarQuantity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cars")]
	public partial class Car : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCars;
		
		private int _CarBrandsandModelsId;
		
		private int _ManufactureYearsId;
		
		private int _CarBodyStylesId;
		
		private int _CarColorsId;
		
		private int _CarEnginesId;
		
		private int _CarEnginePowersId;
		
		private int _CarFueltypesId;
		
		private int _CarKilometresId;
		
		private int _CarGearboxesId;
		
		private int _CarTransmissionsId;
		
		private int _NewCarsId;
		
		private int _CarPricesId;
		
		private int _CarQuantitiesId;
		
		private int _AdminsId;
		
		private EntityRef<Admin> _Admin;
		
		private EntityRef<CarBodyStyle> _CarBodyStyle;
		
		private EntityRef<CarBrandsandModel> _CarBrandsandModel;
		
		private EntityRef<CarColor> _CarColor;
		
		private EntityRef<CarEnginePower> _CarEnginePower;
		
		private EntityRef<CarEngine> _CarEngine;
		
		private EntityRef<CarFueltype> _CarFueltype;
		
		private EntityRef<CarGearbox> _CarGearbox;
		
		private EntityRef<CarKilometre> _CarKilometre;
		
		private EntityRef<CarPrice> _CarPrice;
		
		private EntityRef<CarQuantity> _CarQuantity;
		
		private EntityRef<CarTransmission> _CarTransmission;
		
		private EntityRef<ManufactureYear> _ManufactureYear;
		
		private EntityRef<NewCar> _NewCar;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCarsChanging(int value);
    partial void OnIdCarsChanged();
    partial void OnCarBrandsandModelsIdChanging(int value);
    partial void OnCarBrandsandModelsIdChanged();
    partial void OnManufactureYearsIdChanging(int value);
    partial void OnManufactureYearsIdChanged();
    partial void OnCarBodyStylesIdChanging(int value);
    partial void OnCarBodyStylesIdChanged();
    partial void OnCarColorsIdChanging(int value);
    partial void OnCarColorsIdChanged();
    partial void OnCarEnginesIdChanging(int value);
    partial void OnCarEnginesIdChanged();
    partial void OnCarEnginePowersIdChanging(int value);
    partial void OnCarEnginePowersIdChanged();
    partial void OnCarFueltypesIdChanging(int value);
    partial void OnCarFueltypesIdChanged();
    partial void OnCarKilometresIdChanging(int value);
    partial void OnCarKilometresIdChanged();
    partial void OnCarGearboxesIdChanging(int value);
    partial void OnCarGearboxesIdChanged();
    partial void OnCarTransmissionsIdChanging(int value);
    partial void OnCarTransmissionsIdChanged();
    partial void OnNewCarsIdChanging(int value);
    partial void OnNewCarsIdChanged();
    partial void OnCarPricesIdChanging(int value);
    partial void OnCarPricesIdChanged();
    partial void OnCarQuantitiesIdChanging(int value);
    partial void OnCarQuantitiesIdChanged();
    partial void OnAdminsIdChanging(int value);
    partial void OnAdminsIdChanged();
    #endregion
		
		public Car()
		{
			this._Admin = default(EntityRef<Admin>);
			this._CarBodyStyle = default(EntityRef<CarBodyStyle>);
			this._CarBrandsandModel = default(EntityRef<CarBrandsandModel>);
			this._CarColor = default(EntityRef<CarColor>);
			this._CarEnginePower = default(EntityRef<CarEnginePower>);
			this._CarEngine = default(EntityRef<CarEngine>);
			this._CarFueltype = default(EntityRef<CarFueltype>);
			this._CarGearbox = default(EntityRef<CarGearbox>);
			this._CarKilometre = default(EntityRef<CarKilometre>);
			this._CarPrice = default(EntityRef<CarPrice>);
			this._CarQuantity = default(EntityRef<CarQuantity>);
			this._CarTransmission = default(EntityRef<CarTransmission>);
			this._ManufactureYear = default(EntityRef<ManufactureYear>);
			this._NewCar = default(EntityRef<NewCar>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCars", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCars
		{
			get
			{
				return this._IdCars;
			}
			set
			{
				if ((this._IdCars != value))
				{
					this.OnIdCarsChanging(value);
					this.SendPropertyChanging();
					this._IdCars = value;
					this.SendPropertyChanged("IdCars");
					this.OnIdCarsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarBrandsandModelsId", DbType="Int NOT NULL")]
		public int CarBrandsandModelsId
		{
			get
			{
				return this._CarBrandsandModelsId;
			}
			set
			{
				if ((this._CarBrandsandModelsId != value))
				{
					if (this._CarBrandsandModel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarBrandsandModelsIdChanging(value);
					this.SendPropertyChanging();
					this._CarBrandsandModelsId = value;
					this.SendPropertyChanged("CarBrandsandModelsId");
					this.OnCarBrandsandModelsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManufactureYearsId", DbType="Int NOT NULL")]
		public int ManufactureYearsId
		{
			get
			{
				return this._ManufactureYearsId;
			}
			set
			{
				if ((this._ManufactureYearsId != value))
				{
					if (this._ManufactureYear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManufactureYearsIdChanging(value);
					this.SendPropertyChanging();
					this._ManufactureYearsId = value;
					this.SendPropertyChanged("ManufactureYearsId");
					this.OnManufactureYearsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarBodyStylesId", DbType="Int NOT NULL")]
		public int CarBodyStylesId
		{
			get
			{
				return this._CarBodyStylesId;
			}
			set
			{
				if ((this._CarBodyStylesId != value))
				{
					if (this._CarBodyStyle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarBodyStylesIdChanging(value);
					this.SendPropertyChanging();
					this._CarBodyStylesId = value;
					this.SendPropertyChanged("CarBodyStylesId");
					this.OnCarBodyStylesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarColorsId", DbType="Int NOT NULL")]
		public int CarColorsId
		{
			get
			{
				return this._CarColorsId;
			}
			set
			{
				if ((this._CarColorsId != value))
				{
					if (this._CarColor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarColorsIdChanging(value);
					this.SendPropertyChanging();
					this._CarColorsId = value;
					this.SendPropertyChanged("CarColorsId");
					this.OnCarColorsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarEnginesId", DbType="Int NOT NULL")]
		public int CarEnginesId
		{
			get
			{
				return this._CarEnginesId;
			}
			set
			{
				if ((this._CarEnginesId != value))
				{
					if (this._CarEngine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarEnginesIdChanging(value);
					this.SendPropertyChanging();
					this._CarEnginesId = value;
					this.SendPropertyChanged("CarEnginesId");
					this.OnCarEnginesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarEnginePowersId", DbType="Int NOT NULL")]
		public int CarEnginePowersId
		{
			get
			{
				return this._CarEnginePowersId;
			}
			set
			{
				if ((this._CarEnginePowersId != value))
				{
					if (this._CarEnginePower.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarEnginePowersIdChanging(value);
					this.SendPropertyChanging();
					this._CarEnginePowersId = value;
					this.SendPropertyChanged("CarEnginePowersId");
					this.OnCarEnginePowersIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarFueltypesId", DbType="Int NOT NULL")]
		public int CarFueltypesId
		{
			get
			{
				return this._CarFueltypesId;
			}
			set
			{
				if ((this._CarFueltypesId != value))
				{
					if (this._CarFueltype.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarFueltypesIdChanging(value);
					this.SendPropertyChanging();
					this._CarFueltypesId = value;
					this.SendPropertyChanged("CarFueltypesId");
					this.OnCarFueltypesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarKilometresId", DbType="Int NOT NULL")]
		public int CarKilometresId
		{
			get
			{
				return this._CarKilometresId;
			}
			set
			{
				if ((this._CarKilometresId != value))
				{
					if (this._CarKilometre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarKilometresIdChanging(value);
					this.SendPropertyChanging();
					this._CarKilometresId = value;
					this.SendPropertyChanged("CarKilometresId");
					this.OnCarKilometresIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarGearboxesId", DbType="Int NOT NULL")]
		public int CarGearboxesId
		{
			get
			{
				return this._CarGearboxesId;
			}
			set
			{
				if ((this._CarGearboxesId != value))
				{
					if (this._CarGearbox.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarGearboxesIdChanging(value);
					this.SendPropertyChanging();
					this._CarGearboxesId = value;
					this.SendPropertyChanged("CarGearboxesId");
					this.OnCarGearboxesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarTransmissionsId", DbType="Int NOT NULL")]
		public int CarTransmissionsId
		{
			get
			{
				return this._CarTransmissionsId;
			}
			set
			{
				if ((this._CarTransmissionsId != value))
				{
					if (this._CarTransmission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarTransmissionsIdChanging(value);
					this.SendPropertyChanging();
					this._CarTransmissionsId = value;
					this.SendPropertyChanged("CarTransmissionsId");
					this.OnCarTransmissionsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewCarsId", DbType="Int NOT NULL")]
		public int NewCarsId
		{
			get
			{
				return this._NewCarsId;
			}
			set
			{
				if ((this._NewCarsId != value))
				{
					if (this._NewCar.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNewCarsIdChanging(value);
					this.SendPropertyChanging();
					this._NewCarsId = value;
					this.SendPropertyChanged("NewCarsId");
					this.OnNewCarsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarPricesId", DbType="Int NOT NULL")]
		public int CarPricesId
		{
			get
			{
				return this._CarPricesId;
			}
			set
			{
				if ((this._CarPricesId != value))
				{
					if (this._CarPrice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarPricesIdChanging(value);
					this.SendPropertyChanging();
					this._CarPricesId = value;
					this.SendPropertyChanged("CarPricesId");
					this.OnCarPricesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarQuantitiesId", DbType="Int NOT NULL")]
		public int CarQuantitiesId
		{
			get
			{
				return this._CarQuantitiesId;
			}
			set
			{
				if ((this._CarQuantitiesId != value))
				{
					if (this._CarQuantity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarQuantitiesIdChanging(value);
					this.SendPropertyChanging();
					this._CarQuantitiesId = value;
					this.SendPropertyChanged("CarQuantitiesId");
					this.OnCarQuantitiesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminsId", DbType="Int NOT NULL")]
		public int AdminsId
		{
			get
			{
				return this._AdminsId;
			}
			set
			{
				if ((this._AdminsId != value))
				{
					if (this._Admin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdminsIdChanging(value);
					this.SendPropertyChanging();
					this._AdminsId = value;
					this.SendPropertyChanged("AdminsId");
					this.OnAdminsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Admin_Car", Storage="_Admin", ThisKey="AdminsId", OtherKey="IdAdmins", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Admin Admin
		{
			get
			{
				return this._Admin.Entity;
			}
			set
			{
				Admin previousValue = this._Admin.Entity;
				if (((previousValue != value) 
							|| (this._Admin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Admin.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._Admin.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._AdminsId = value.IdAdmins;
					}
					else
					{
						this._AdminsId = default(int);
					}
					this.SendPropertyChanged("Admin");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarBodyStyle_Car", Storage="_CarBodyStyle", ThisKey="CarBodyStylesId", OtherKey="IdCarBodyStyles", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CarBodyStyle CarBodyStyle
		{
			get
			{
				return this._CarBodyStyle.Entity;
			}
			set
			{
				CarBodyStyle previousValue = this._CarBodyStyle.Entity;
				if (((previousValue != value) 
							|| (this._CarBodyStyle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarBodyStyle.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._CarBodyStyle.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._CarBodyStylesId = value.IdCarBodyStyles;
					}
					else
					{
						this._CarBodyStylesId = default(int);
					}
					this.SendPropertyChanged("CarBodyStyle");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarBrandsandModel_Car", Storage="_CarBrandsandModel", ThisKey="CarBrandsandModelsId", OtherKey="IdCarBrandsandModels", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CarBrandsandModel CarBrandsandModel
		{
			get
			{
				return this._CarBrandsandModel.Entity;
			}
			set
			{
				CarBrandsandModel previousValue = this._CarBrandsandModel.Entity;
				if (((previousValue != value) 
							|| (this._CarBrandsandModel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarBrandsandModel.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._CarBrandsandModel.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._CarBrandsandModelsId = value.IdCarBrandsandModels;
					}
					else
					{
						this._CarBrandsandModelsId = default(int);
					}
					this.SendPropertyChanged("CarBrandsandModel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarColor_Car", Storage="_CarColor", ThisKey="CarColorsId", OtherKey="IdCarColors", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CarColor CarColor
		{
			get
			{
				return this._CarColor.Entity;
			}
			set
			{
				CarColor previousValue = this._CarColor.Entity;
				if (((previousValue != value) 
							|| (this._CarColor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarColor.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._CarColor.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._CarColorsId = value.IdCarColors;
					}
					else
					{
						this._CarColorsId = default(int);
					}
					this.SendPropertyChanged("CarColor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarEnginePower_Car", Storage="_CarEnginePower", ThisKey="CarEnginePowersId", OtherKey="IdCarEnginePowers", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CarEnginePower CarEnginePower
		{
			get
			{
				return this._CarEnginePower.Entity;
			}
			set
			{
				CarEnginePower previousValue = this._CarEnginePower.Entity;
				if (((previousValue != value) 
							|| (this._CarEnginePower.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarEnginePower.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._CarEnginePower.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._CarEnginePowersId = value.IdCarEnginePowers;
					}
					else
					{
						this._CarEnginePowersId = default(int);
					}
					this.SendPropertyChanged("CarEnginePower");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarEngine_Car", Storage="_CarEngine", ThisKey="CarEnginesId", OtherKey="IdCarEngines", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CarEngine CarEngine
		{
			get
			{
				return this._CarEngine.Entity;
			}
			set
			{
				CarEngine previousValue = this._CarEngine.Entity;
				if (((previousValue != value) 
							|| (this._CarEngine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarEngine.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._CarEngine.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._CarEnginesId = value.IdCarEngines;
					}
					else
					{
						this._CarEnginesId = default(int);
					}
					this.SendPropertyChanged("CarEngine");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarFueltype_Car", Storage="_CarFueltype", ThisKey="CarFueltypesId", OtherKey="IdCarFueltypes", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CarFueltype CarFueltype
		{
			get
			{
				return this._CarFueltype.Entity;
			}
			set
			{
				CarFueltype previousValue = this._CarFueltype.Entity;
				if (((previousValue != value) 
							|| (this._CarFueltype.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarFueltype.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._CarFueltype.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._CarFueltypesId = value.IdCarFueltypes;
					}
					else
					{
						this._CarFueltypesId = default(int);
					}
					this.SendPropertyChanged("CarFueltype");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarGearbox_Car", Storage="_CarGearbox", ThisKey="CarGearboxesId", OtherKey="IdCarGearboxes", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CarGearbox CarGearbox
		{
			get
			{
				return this._CarGearbox.Entity;
			}
			set
			{
				CarGearbox previousValue = this._CarGearbox.Entity;
				if (((previousValue != value) 
							|| (this._CarGearbox.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarGearbox.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._CarGearbox.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._CarGearboxesId = value.IdCarGearboxes;
					}
					else
					{
						this._CarGearboxesId = default(int);
					}
					this.SendPropertyChanged("CarGearbox");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarKilometre_Car", Storage="_CarKilometre", ThisKey="CarKilometresId", OtherKey="IdCarKilometres", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CarKilometre CarKilometre
		{
			get
			{
				return this._CarKilometre.Entity;
			}
			set
			{
				CarKilometre previousValue = this._CarKilometre.Entity;
				if (((previousValue != value) 
							|| (this._CarKilometre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarKilometre.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._CarKilometre.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._CarKilometresId = value.IdCarKilometres;
					}
					else
					{
						this._CarKilometresId = default(int);
					}
					this.SendPropertyChanged("CarKilometre");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarPrice_Car", Storage="_CarPrice", ThisKey="CarPricesId", OtherKey="IdCarPrices", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CarPrice CarPrice
		{
			get
			{
				return this._CarPrice.Entity;
			}
			set
			{
				CarPrice previousValue = this._CarPrice.Entity;
				if (((previousValue != value) 
							|| (this._CarPrice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarPrice.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._CarPrice.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._CarPricesId = value.IdCarPrices;
					}
					else
					{
						this._CarPricesId = default(int);
					}
					this.SendPropertyChanged("CarPrice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarQuantity_Car", Storage="_CarQuantity", ThisKey="CarQuantitiesId", OtherKey="IdCarQuantities", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CarQuantity CarQuantity
		{
			get
			{
				return this._CarQuantity.Entity;
			}
			set
			{
				CarQuantity previousValue = this._CarQuantity.Entity;
				if (((previousValue != value) 
							|| (this._CarQuantity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarQuantity.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._CarQuantity.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._CarQuantitiesId = value.IdCarQuantities;
					}
					else
					{
						this._CarQuantitiesId = default(int);
					}
					this.SendPropertyChanged("CarQuantity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarTransmission_Car", Storage="_CarTransmission", ThisKey="CarTransmissionsId", OtherKey="IdCarTransmissions", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CarTransmission CarTransmission
		{
			get
			{
				return this._CarTransmission.Entity;
			}
			set
			{
				CarTransmission previousValue = this._CarTransmission.Entity;
				if (((previousValue != value) 
							|| (this._CarTransmission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarTransmission.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._CarTransmission.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._CarTransmissionsId = value.IdCarTransmissions;
					}
					else
					{
						this._CarTransmissionsId = default(int);
					}
					this.SendPropertyChanged("CarTransmission");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ManufactureYear_Car", Storage="_ManufactureYear", ThisKey="ManufactureYearsId", OtherKey="IdManufactureYears", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ManufactureYear ManufactureYear
		{
			get
			{
				return this._ManufactureYear.Entity;
			}
			set
			{
				ManufactureYear previousValue = this._ManufactureYear.Entity;
				if (((previousValue != value) 
							|| (this._ManufactureYear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ManufactureYear.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._ManufactureYear.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._ManufactureYearsId = value.IdManufactureYears;
					}
					else
					{
						this._ManufactureYearsId = default(int);
					}
					this.SendPropertyChanged("ManufactureYear");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NewCar_Car", Storage="_NewCar", ThisKey="NewCarsId", OtherKey="IdNewCars", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public NewCar NewCar
		{
			get
			{
				return this._NewCar.Entity;
			}
			set
			{
				NewCar previousValue = this._NewCar.Entity;
				if (((previousValue != value) 
							|| (this._NewCar.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NewCar.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._NewCar.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._NewCarsId = value.IdNewCars;
					}
					else
					{
						this._NewCarsId = default(int);
					}
					this.SendPropertyChanged("NewCar");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarTransmissions")]
	public partial class CarTransmission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCarTransmissions;
		
		private string _Name_of_Car_Transmissions;
		
		private EntitySet<Car> _Cars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCarTransmissionsChanging(int value);
    partial void OnIdCarTransmissionsChanged();
    partial void OnName_of_Car_TransmissionsChanging(string value);
    partial void OnName_of_Car_TransmissionsChanged();
    #endregion
		
		public CarTransmission()
		{
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCarTransmissions", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCarTransmissions
		{
			get
			{
				return this._IdCarTransmissions;
			}
			set
			{
				if ((this._IdCarTransmissions != value))
				{
					this.OnIdCarTransmissionsChanging(value);
					this.SendPropertyChanging();
					this._IdCarTransmissions = value;
					this.SendPropertyChanged("IdCarTransmissions");
					this.OnIdCarTransmissionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Name of Car Transmissions]", Storage="_Name_of_Car_Transmissions", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name_of_Car_Transmissions
		{
			get
			{
				return this._Name_of_Car_Transmissions;
			}
			set
			{
				if ((this._Name_of_Car_Transmissions != value))
				{
					this.OnName_of_Car_TransmissionsChanging(value);
					this.SendPropertyChanging();
					this._Name_of_Car_Transmissions = value;
					this.SendPropertyChanged("Name_of_Car_Transmissions");
					this.OnName_of_Car_TransmissionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarTransmission_Car", Storage="_Cars", ThisKey="IdCarTransmissions", OtherKey="CarTransmissionsId")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarTransmission = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarTransmission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customers")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCustomers;
		
		private string _Name_of_Customers;
		
		private string _Passwords_of_Customers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCustomersChanging(int value);
    partial void OnIdCustomersChanged();
    partial void OnName_of_CustomersChanging(string value);
    partial void OnName_of_CustomersChanged();
    partial void OnPasswords_of_CustomersChanging(string value);
    partial void OnPasswords_of_CustomersChanged();
    #endregion
		
		public Customer()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCustomers", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCustomers
		{
			get
			{
				return this._IdCustomers;
			}
			set
			{
				if ((this._IdCustomers != value))
				{
					this.OnIdCustomersChanging(value);
					this.SendPropertyChanging();
					this._IdCustomers = value;
					this.SendPropertyChanged("IdCustomers");
					this.OnIdCustomersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Name of Customers]", Storage="_Name_of_Customers", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name_of_Customers
		{
			get
			{
				return this._Name_of_Customers;
			}
			set
			{
				if ((this._Name_of_Customers != value))
				{
					this.OnName_of_CustomersChanging(value);
					this.SendPropertyChanging();
					this._Name_of_Customers = value;
					this.SendPropertyChanged("Name_of_Customers");
					this.OnName_of_CustomersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Passwords of Customers]", Storage="_Passwords_of_Customers", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Passwords_of_Customers
		{
			get
			{
				return this._Passwords_of_Customers;
			}
			set
			{
				if ((this._Passwords_of_Customers != value))
				{
					this.OnPasswords_of_CustomersChanging(value);
					this.SendPropertyChanging();
					this._Passwords_of_Customers = value;
					this.SendPropertyChanged("Passwords_of_Customers");
					this.OnPasswords_of_CustomersChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ManufactureYears")]
	public partial class ManufactureYear : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdManufactureYears;
		
		private System.DateTime _Manufacture_Years;
		
		private EntitySet<Car> _Cars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdManufactureYearsChanging(int value);
    partial void OnIdManufactureYearsChanged();
    partial void OnManufacture_YearsChanging(System.DateTime value);
    partial void OnManufacture_YearsChanged();
    #endregion
		
		public ManufactureYear()
		{
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdManufactureYears", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdManufactureYears
		{
			get
			{
				return this._IdManufactureYears;
			}
			set
			{
				if ((this._IdManufactureYears != value))
				{
					this.OnIdManufactureYearsChanging(value);
					this.SendPropertyChanging();
					this._IdManufactureYears = value;
					this.SendPropertyChanged("IdManufactureYears");
					this.OnIdManufactureYearsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Manufacture Years]", Storage="_Manufacture_Years", DbType="DateTime NOT NULL")]
		public System.DateTime Manufacture_Years
		{
			get
			{
				return this._Manufacture_Years;
			}
			set
			{
				if ((this._Manufacture_Years != value))
				{
					this.OnManufacture_YearsChanging(value);
					this.SendPropertyChanging();
					this._Manufacture_Years = value;
					this.SendPropertyChanged("Manufacture_Years");
					this.OnManufacture_YearsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ManufactureYear_Car", Storage="_Cars", ThisKey="IdManufactureYears", OtherKey="ManufactureYearsId")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.ManufactureYear = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.ManufactureYear = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NewCars")]
	public partial class NewCar : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdNewCars;
		
		private bool _New_Car;
		
		private EntitySet<Car> _Cars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdNewCarsChanging(int value);
    partial void OnIdNewCarsChanged();
    partial void OnNew_CarChanging(bool value);
    partial void OnNew_CarChanged();
    #endregion
		
		public NewCar()
		{
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdNewCars", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdNewCars
		{
			get
			{
				return this._IdNewCars;
			}
			set
			{
				if ((this._IdNewCars != value))
				{
					this.OnIdNewCarsChanging(value);
					this.SendPropertyChanging();
					this._IdNewCars = value;
					this.SendPropertyChanged("IdNewCars");
					this.OnIdNewCarsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[New Car]", Storage="_New_Car", DbType="Bit NOT NULL")]
		public bool New_Car
		{
			get
			{
				return this._New_Car;
			}
			set
			{
				if ((this._New_Car != value))
				{
					this.OnNew_CarChanging(value);
					this.SendPropertyChanging();
					this._New_Car = value;
					this.SendPropertyChanged("New_Car");
					this.OnNew_CarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NewCar_Car", Storage="_Cars", ThisKey="IdNewCars", OtherKey="NewCarsId")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.NewCar = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.NewCar = null;
		}
	}
}
#pragma warning restore 1591
